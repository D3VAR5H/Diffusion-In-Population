import matplotlib.pyplot as plt
import os
import math
import numpy
from scipy.interpolate import interp1d
from random import random
from pylab import *


def growth_term(direc):
    file = open(direc, 'w')

    # Maximum Carrying Capacity
    K = [10, 50, 100, 500]

    # Ratios - growth rate
    ratios = [0.01, 0.1, 0.5, 0.875]

    # 1. Layer Start
    for i in range(len(ratios)):
        file.write('[')
        ratio = ratios[i]
        several_means = []

        # Birth and Death Probability
        # bo is [0.3,0.8] for our IBM data.
        # do is 0 for our IBM data.
        bo = 0.3
        do = 0
        theta = ratio * bo

        # 2. Layer Start
        for item in range(len(K)):

            number_repetition = 10
            count_extinction = 0
            current_repetition = 1
            k = K[item]
            N = K[item]

            # Repetition list have the values of mean generated by no_of_repetitions.
            # The mean is calculated several times to achieve precised output.
            mean_value_repetition = []

            print('K : ', k, ', Ratio : ', ratio)
            print('No of Repetition : ', number_repetition)
            while current_repetition <= number_repetition:

                # Time step.
                time = 1000
                number_particles = [N]

                # 3. Layer Start
                for time_step in range(1, time):
                    birth = 0
                    death = 0

                    # Calculate the Birth and Death Probability
                    birth_probability = bo - (
                            (bo - theta) * (N / k))
                    death_probability = do + (
                            (theta - do) * (N / k))
                    if birth_probability < 0:
                        death_probability = death_probability - birth_probability

                    # 4. Layer Start
                    for j in range(0, N):

                        # Generate the random no of birth.
                        A = random()

                        # Generate the random no of birth.
                        B = random()

                        while A == float(0):
                            A = random()

                        while B == float(0):
                            B = random()

                        if A < death_probability:
                            death += 1
                        if B < birth_probability:
                            birth += 1

                    # 4. Layer End

                    # Update the no of individuals by adding the
                    # no of birth and subtracting the no of death.
                    N += birth - death
                    number_particles.append(N)

                # 3. Layer End

                # If the process leads to extinction :
                # increase the no of repetition.
                if number_particles[time - 1] == 0:
                    if count_extinction <= 100:
                        number_repetition = number_repetition + 1
                    count_extinction = count_extinction + 1
                    print('extinction')

                # calculate the mean value for generated no of individuals.
                if number_particles[time - 1] != 0:
                    number_particle = numpy.array(
                        number_particles)
                    mean_value = number_particle.mean()
                    mean_value_repetition.append(mean_value)

                current_repetition += 1

            # Finally, Obtain the mean value of the list that
            # contains several mean values for precise mean value.
            mean_value_repetition_array = array(
                mean_value_repetition)
            mean_end = mean_value_repetition_array.mean()

            file.write(str(mean_end)[:7] + ', ')

        # 2. Layer End

        file.write(']\n')

    # 1. Layer End

    file.close()
# return


if __name__ == "__main__":

    # Get the path for storing the data
    direc = os.path.join(os.path.dirname(
        os.path.realpath(__file__)), 'data.txt')

    #  Calculate the growth term
    growth_term(direc)

    # Maximum Carrying Capacity
    K = [10, 50, 100, 500]

    #  Fetch the generated data from file
    file = open(direc, 'r')
    data = file.read()

    # Remove the unusual data from file
    l = data.split(']')
    list1 = l[0].split(',')
    list2 = l[1].split(',')
    list3 = l[2].split(',')
    list4 = l[3].split(',')
    list1[0] = list1[0].split('[')[1]
    list2[0] = list2[0].split('[')[1]
    list3[0] = list3[0].split('[')[1]
    list4[0] = list4[0].split('[')[1]
    list1.pop()
    list2.pop()
    list3.pop()
    list4.pop()

    # Generate the x and y coordinates for Graph
    a = []
    for i in range(len(K)):
        a.append(math.log(K[i], 10))
        list1[i] = float(list1[i]) / K[i]
        list2[i] = float(list2[i]) / K[i]
        list3[i] = float(list3[i]) / K[i]
        list4[i] = float(list4[i]) / K[i]
        if list1[i] >= 1.00000:
            list1[i] = 0.99999999
        if list2[i] >= 1.00000:
            list2[i] = 0.99999999
        if list3[i] >= 1.00000:
            list3[i] = 0.99999999
        if list4[i] >= 1.00000:
            list4[i] = 0.99999999
    print(list1, '\n', list2, '\n', list3, '\n', list4)

    # Convert the x coordinates to array
    x = numpy.array(a)
    x_new = np.linspace(x.min(), x.max(), 500)

    # Set the limit for Y-axis.
    plt.ylim([0.9, 1.01])

    # Plot the graph for 'θ = 0.875 x bo'.
    y = numpy.array(list1)
    f = interp1d(x, y, kind='quadratic')
    y_smooth = f(x_new)
    plt.plot(x_new, y_smooth, label="θ = 0.875 x bo")
    plt.scatter(x, y)

    # Plot the graph for 'θ = 0.5 x bo'.
    y = numpy.array(list2)
    f = interp1d(x, y, kind='quadratic')
    y_smooth = f(x_new)
    plt.plot(x_new, y_smooth, label="θ = 0.5 x bo")
    plt.scatter(x, y)

    # Plot the graph for 'θ = 0.1 x bo'.
    y = numpy.array(list3)
    f = interp1d(x, y, kind='quadratic')
    y_smooth = f(x_new)
    plt.plot(x_new, y_smooth, label="θ = 0.1 x bo")
    plt.scatter(x, y)

    # Plot the graph for 'θ = 0.01 x bo'.
    y = numpy.array(list4)
    f = interp1d(x, y, kind='quadratic')
    y_smooth = f(x_new)
    plt.plot(x_new, y_smooth, label="θ = 0.01 x bo")
    plt.scatter(x, y)

    # Display the final plots with labels
    plt.xlabel('log(K)')
    plt.ylabel('<N>/K')
    plt.legend()
    plt.show()
